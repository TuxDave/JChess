package com.tuxdave.JChess.UI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.tuxdave.JChess.UI.listener.ReadyListener;
import com.tuxdave.JChess.core.chess.Player;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Launcher extends JPanel implements ReadyListener {
    private JPanel panel1;
    private JButton startButton;
    private GPlayerCreator gPlayerCreator1;
    private GPlayerCreator gPlayerCreator2;

    //START AUTOGENERATED CODE

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(gPlayerCreator1, new GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(gPlayerCreator2, new GridConstraints(0, 2, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setEnabled(false);
        Font startButtonFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 16, startButton.getFont());
        if (startButtonFont != null) startButton.setFont(startButtonFont);
        startButton.setIcon(new ImageIcon(getClass().getResource("/Resources/Icons/start.png")));
        startButton.setText("");
        panel1.add(startButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 40), new Dimension(-1, 40), new Dimension(-1, 40), 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    //END AUTOGENERATED CODE

    private final int WIDTH = 620;
    private final int HEIGHT = 390;

    public Launcher() {
        players = new Player[2];
        allPlayerReady = new boolean[]{false, false};

        $$$setupUI$$$();

        Dimension d = new Dimension(WIDTH, HEIGHT);
        panel1.setOpaque(false);
        panel1.setMinimumSize(d);
        panel1.setMaximumSize(d);
        panel1.setPreferredSize(d);
        add(panel1);
        setMinimumSize(d);
        setMaximumSize(d);
        setPreferredSize(d);

        startButton.setOpaque(false);
        startButton.setFocusPainted(false);
        startButton.setContentAreaFilled(false);
        startButton.setBorderPainted(false);
        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                //todo:add the call to the mainFrame(JChess) passing the players
            }
        });
    }

    private void createUIComponents() {
        gPlayerCreator1 = new GPlayerCreator(this);
        gPlayerCreator2 = new GPlayerCreator(this);
    }

    private final Image VS_IMAGE = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Resources/Icons/vs.png"));

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(VS_IMAGE, 200, 0, this);
    }

    /**
     * called at end of onReady.
     * checks if all the players are ready and if the nicknames are different
     */
    private void checkReady() {
        if (allPlayerReady[0] && allPlayerReady[1] && !players[0].nick.toUpperCase().equals(players[1].nick.toUpperCase())) {
            startButton.setEnabled(true);
        } else {
            startButton.setEnabled(false);
        }
    }

    //LISTENER IMPLEMENTATION

    private Player[] players;
    private boolean[] allPlayerReady;

    /**
     * called on readyButton pressed
     *
     * @param _pNumber   0 or 1
     * @param _nick      the nickname of the player
     * @param _imagePath the complete path of profile image
     * @param _state     ready or not
     * @return nothing
     */
    @Override
    public void onReady(int _pNumber, String _nick, String _imagePath, boolean _state) {
        if (_state) {
            players[_pNumber] = new Player(_nick, _pNumber + 1);
        }
        allPlayerReady[_pNumber] = _state;
        checkReady();
    }
}
